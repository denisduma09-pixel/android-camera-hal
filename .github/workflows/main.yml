name: Сборка простого V4L2 Camera HAL

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Загрузка пустого репозитория
      uses: actions/checkout@v4
      
    - name: Установка NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip

    - name: Создание минимального Camera HAL
      run: |
        export NDK_PATH=$GITHUB_WORKSPACE/android-ndk-r25b
        export TOOLCHAIN=$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64
        export TARGET=armv7a-linux-androideabi
        export API=28
        
        # Создаём простой C++ файл вместо сложного кода
        cat > minimal_camera_hal.cpp << 'EOF'
        #include <stdlib.h>
        #include <unistd.h>
        #include <fcntl.h>
        #include <sys/ioctl.h>
        #include <linux/videodev2.h>
        #include <cutils/log.h>
        #include <hardware/hardware.h>
        #include <hardware/camera_common.h>
        #include <hardware/camera3.h>
        
        #define LOG_TAG "MinimalCameraHAL"
        
        static int camera_device_close(struct hw_device_t* device) {
            free(device);
            return 0;
        }
        
        static int camera_get_number_of_cameras(void) {
            ALOGI("MinimalCameraHAL: get_number_of_cameras()");
            // Проверяем есть ли V4L2 устройства
            int fd = open("/dev/video0", O_RDONLY);
            if (fd >= 0) {
                close(fd);
                return 1; // Одна камера найдена
            }
            return 0; // Камер нет
        }
        
        static int camera_get_camera_info(int camera_id, struct camera_info* info) {
            ALOGI("MinimalCameraHAL: get_camera_info(%d)", camera_id);
            if (camera_id == 0) {
                info->facing = CAMERA_FACING_BACK;
                info->orientation = 0;
                return 0;
            }
            return -1;
        }
        
        static int camera_set_callbacks(const camera_module_callbacks_t* callbacks) {
            ALOGI("MinimalCameraHAL: set_callbacks()");
            return 0;
        }
        
        static int camera_open(const struct hw_module_t* module, const char* id, 
                              struct hw_device_t** device) {
            ALOGI("MinimalCameraHAL: open(%s)", id);
            
            if (strcmp(id, "0") != 0) return -1;
            
            struct hw_device_t* dev = (struct hw_device_t*)calloc(1, sizeof(struct hw_device_t));
            if (!dev) return -1;
            
            dev->tag = HARDWARE_DEVICE_TAG;
            dev->version = CAMERA_DEVICE_API_VERSION_3_0;
            dev->module = (struct hw_module_t*)module;
            dev->close = camera_device_close;
            
            *device = dev;
            return 0;
        }
        
        static struct hw_module_methods_t camera_module_methods = {
            .open = camera_open
        };
        
        camera_module_t HAL_MODULE_INFO_SYM = {
            .common = {
                .tag = HARDWARE_MODULE_TAG,
                .module_api_version = CAMERA_MODULE_API_VERSION_2_4,
                .hal_api_version = HARDWARE_HAL_API_VERSION,
                .id = CAMERA_HARDWARE_MODULE_ID,
                .name = "Minimal V4L2 Camera HAL",
                .author = "Android",
                .methods = &camera_module_methods,
            },
            .get_number_of_cameras = camera_get_number_of_cameras,
            .get_camera_info = camera_get_camera_info,
            .set_callbacks = camera_set_callbacks,
        };
        EOF
        
        # Создаём минимальные заголовки
        mkdir -p hardware
        cat > hardware/camera_common.h << 'EOF'
        #ifndef HARDWARE_CAMERA_COMMON_H
        #define HARDWARE_CAMERA_COMMON_H
        
        #include <hardware/hardware.h>
        
        #define CAMERA_HARDWARE_MODULE_ID "camera"
        #define CAMERA_MODULE_API_VERSION_2_4 HARDWARE_MODULE_API_VERSION(2, 4)
        
        #define CAMERA_DEVICE_API_VERSION_1_0 HARDWARE_DEVICE_API_VERSION(1, 0)
        #define CAMERA_DEVICE_API_VERSION_2_0 HARDWARE_DEVICE_API_VERSION(2, 0)
        #define CAMERA_DEVICE_API_VERSION_3_0 HARDWARE_DEVICE_API_VERSION(3, 0)
        #define CAMERA_DEVICE_API_VERSION_3_1 HARDWARE_DEVICE_API_VERSION(3, 1)
        #define CAMERA_DEVICE_API_VERSION_3_2 HARDWARE_DEVICE_API_VERSION(3, 2)
        #define CAMERA_DEVICE_API_VERSION_3_3 HARDWARE_DEVICE_API_VERSION(3, 3)
        #define CAMERA_DEVICE_API_VERSION_3_4 HARDWARE_DEVICE_API_VERSION(3, 4)
        #define CAMERA_DEVICE_API_VERSION_3_5 HARDWARE_DEVICE_API_VERSION(3, 5)
        #define CAMERA_DEVICE_API_VERSION_3_6 HARDWARE_DEVICE_API_VERSION(3, 6)
        #define CAMERA_DEVICE_API_VERSION_3_7 HARDWARE_DEVICE_API_VERSION(3, 7)
        
        typedef enum {
            CAMERA_FACING_BACK = 0,
            CAMERA_FACING_FRONT = 1,
            CAMERA_FACING_EXTERNAL = 2
        } camera_facing_t;
        
        typedef struct camera_info {
            int facing;
            int orientation;
            void* static_camera_characteristics;
            uint32_t device_version;
        } camera_info_t;
        
        typedef struct camera_module_callbacks {
            void (*camera_device_status_change)(const struct camera_module_callbacks*,
                                               int camera_id, int new_status);
            void (*torch_mode_status_change)(const struct camera_module_callbacks*,
                                            const char* camera_id, int new_status);
        } camera_module_callbacks_t;
        
        __BEGIN_DECLS
        
        typedef struct camera_module {
            hw_module_t common;
            int (*get_number_of_cameras)(void);
            int (*get_camera_info)(int camera_id, struct camera_info* info);
            int (*set_callbacks)(const camera_module_callbacks_t* callbacks);
            void* reserved[6];
        } camera_module_t;
        
        __END_DECLS
        
        #endif
        EOF
        
        cat > hardware/camera3.h << 'EOF'
        #ifndef HARDWARE_CAMERA3_H
        #define HARDWARE_CAMERA3_H
        
        #include <hardware/hardware.h>
        #include <hardware/camera_common.h>
        
        __BEGIN_DECLS
        
        typedef struct camera3_device_ops {
            int (*initialize)(const struct camera3_device*,
                             const camera3_callback_ops_t*);
            int (*configure_streams)(const struct camera3_device*,
                                    camera3_stream_configuration_t*);
            int (*register_stream_buffers)(const struct camera3_device*,
                                          const camera3_stream_buffer_set_t*);
            const camera_metadata_t* (*construct_default_request_settings)(
                const struct camera3_device*, int type);
            int (*process_capture_request)(const struct camera3_device*,
                                          camera3_capture_request_t*);
            void (*get_metadata_vendor_tag_ops)(const struct camera3_device*,
                                               vendor_tag_ops_t*);
            void (*signal_stream_flush)(const struct camera3_device*,
                                       uint32_t num_streams,
                                       const camera3_stream_t* const* streams);
            int (*flush)(const struct camera3_device*);
        } camera3_device_ops_t;
        
        typedef struct camera3_device {
            hw_device_t common;
            camera3_device_ops_t* ops;
            void* priv;
        } camera3_device_t;
        
        __END_DECLS
        
        #endif
        EOF
        
        # Компилируем простой HAL
        echo "=== КОМПИЛЯЦИЯ ПРОСТОГО HAL ==="
        $TOOLCHAIN/bin/$TARGET$API-clang++ \
          -shared -fPIC -std=c++17 \
          -o camera.msm8916.so \
          minimal_camera_hal.cpp \
          -I. -I$NDK_PATH/sysroot/usr/include -Ihardware \
          -llog -lutils -lcutils -lcamera_metadata \
          -D__ARM_ARCH_7A__ \
          -Wno-multichar -Wno-deprecated-declarations
        
        echo "=== РЕЗУЛЬТАТ ==="
        if [ -f "camera.msm8916.so" ]; then
          echo "✅ УСПЕХ: Простой HAL создан!"
          file camera.msm8916.so
          ls -la camera.msm8916.so
        else
          echo "❌ Не удалось создать HAL"
        fi

    - name: Сохранение результата
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: simple-camera-hal
        path: camera.msm8916.so
